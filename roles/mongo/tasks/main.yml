---

# This role deploys the mongod processes and sets up the replication set.

- name: Add the OS specific varibles
  include_vars: "{{ ansible_os_family }}.yml"

- name: Install the apt key for ubuntu
  apt_key: id=7F0CEB10 url="http://docs.mongodb.org/10gen-gpg-key.asc"
  when: ansible_os_family == "Debian"

- name: Install the repository for Ubuntu mongodb
  apt_repository: repo="deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse" state=present
  when: ansible_os_family == "Debian"

- name: Create the repository for mongodb-org-3.0
  copy: src=mongodb-org-3.0.repo dest=/etc/yum.repos.d/mongodb-org-3.0.repo
  when: ansible_os_family == "RedHat"

- name: Create the mongodb configuration file
  template: src=mongod.conf.j2 dest=/etc/mongod.conf

- name: Install the mongodb package
  yum: name={{ item }} state=installed
  with_items: mongod_pkgs | default(mongod_pkgs_default)
  register: mongod_install
  when: ansible_os_family == "RedHat"

- name: Install the mongodb package
  apt: name={{ item }} state=installed update_cache=yes
  with_items: mongod_pkgs | default(mongod_pkgs_default)
  register: mongod_install
  when: ansible_os_family == "Debian"

- name: Stop the mongodb service for redhat variants
  command: /etc/init.d/mongod stop
  when: ansible_os_family == "RedHat" and (mongod_install|changed)

- name: Stop the mongodb service for Ubuntu variants
  service: name=mongod state=stopped
  when: ansible_os_family == "Debian" and (mongod_install|changed)

- name: Generate the keyfile for authentication
  set_fact: mongod_secret_key="{{ lookup('password', 'secret length=256 chars=ascii_letters,digits') }}"
  when: mongod_use_key

- name: Copy the keyfile for authentication
  copy: src=secret dest={{ mongod_datadir_prefix }}/secret owner={{ mongo_user }} group={{ mongo_group }} mode=0400
  when: mongod_use_key

- name: Check whether mongod is authorized to run on port {{ mongod_port }}
  shell: semanage port -l | grep mongo | grep {{ mongod_port }}
  when: ansible_os_family == "RedHat"
  register: mongod_selinux_port_check
  ignore_errors: true

- name: Allow the mongodb service to run on redhat
  shell: semanage port -a -t mongod_port_t -p tcp {{ mongod_port }}
  when: ansible_os_family == "RedHat" and mongod_selinux_port_check|failed

- name: Start the mongodb service for redhat variants
  command: /etc/init.d/mongod start
  when: ansible_os_family == "RedHat"

- name: Start the mongodb service for Ubuntu variants
  service: name=mongod state=started
  when: ansible_os_family == "Debian"

- name: Create the file to initialize the mongod replica set
  template: src=repset_init.j2 dest=/tmp/repset_init.js
  when: mongod_replication and (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname)

- name: wait for mongo
  wait_for: port={{ mongod_port }}

- name: Initialize the replication set
  shell: /usr/bin/mongo --port {{ mongod_port }} admin /tmp/repset_init.js
  when: mongod_replication and (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname)

- name: Generate the password for authentication
  set_fact: mongod_password="{{ lookup('password', 'mongod_password length=32 chars=ascii_letters,digits') }}"
  when: mongod_user != false

- name: Construct mongo flags for user login
  set_fact: mongod_user_login_flags="--username {{ mongod_user }} --password {{ mongod_password }}"
  when: mongod_user != false

- name: Clear mongo flags for user login
  set_fact: mongod_user_login_flags=""
  when: mongod_user == false

- name: Check if mongo user exists
  shell: /usr/bin/mongo --port {{ mongod_port }} {{ mongod_user_login_flags }} --eval 'db.serverStatus()' admin
  register: mongod_user_check
  when: mongod_user != false and ((not mongod_replication) or (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname))
  ignore_errors: true
  changed_when: false

- name: Create the file to create the initial user
  template: src=create_user.j2 dest=/tmp/create_user.js
  when: mongod_user != false and (mongod_user_check | failed) and ((not mongod_replication) or (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname))

- name: Create the password file for future reference
  shell: echo "{{ mongod_password }}" > /tmp/mongod_password
  changed_when: false

- name: Create the initial user
  shell: /usr/bin/mongo --port {{ mongod_port }} admin /tmp/create_user.js
  when: mongod_user != false and (mongod_user_check | failed) and ((not mongod_replication) or (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname))

- name: Create the file to add additional RS members
  template: src=add_members.j2 dest=/tmp/add_members.js
  when: mongod_user != false and (mongod_user_check | failed) and ((not mongod_replication) or (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname))

- name: Add members to RS
  shell: /usr/bin/mongo --port {{ mongod_port }} {{ mongod_user_login_flags }} admin /tmp/add_members.js
  when: mongod_replication and (mongod_repl_master == inventory_hostname or mongod_repl_master == ansible_hostname)
